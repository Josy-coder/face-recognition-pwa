generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  firstName         String?
  middleName        String?
  lastName          String?
  gender            String?
  dateOfBirth       DateTime?
  profileImageUrl   String?
  faceId            String?
  residentialPath   String?
  isEmailVerified   Boolean   @default(false)
  verificationToken String?
  occupation        String?
  religion          String?
  denomination      String?
  clan              String?
  nid               String?
  electorId         String?
  passport          String?
  driversLicense    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role      @default(USER)
  registeredPeople  Person[]
  personalAlbums    Album[]
}

model Admin {
  id            String                @id @default(cuid())
  email         String                @unique
  password      String
  firstName     String?
  lastName      String?
  role          Role                  @default(ADMIN)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  nodeMovements NodeMovementHistory[]
}

model GeoRegion {
  id         String      @id @default(cuid())
  name       String      @unique
  type       String
  provinces  Province[]
  regions    Region[]
  mkaRegions MkaRegion[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  order      Int         @default(0)
  level      Int         @default(0)
}

model Province {
  id          String     @id @default(cuid())
  name        String
  code        String?
  geoRegion   GeoRegion  @relation(fields: [geoRegionId], references: [id])
  geoRegionId String
  districts   District[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  order       Int        @default(0)
  path        String     @unique
  level       Int        @default(1)

  @@unique([name, geoRegionId])
  @@index([path])
}

model District {
  id         String   @id @default(cuid())
  name       String
  code       String?
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String
  llgs       LLG[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Int      @default(0)
  path       String   @unique
  level      Int      @default(2)

  @@unique([name, provinceId])
  @@index([path])
}

model LLG {
  id         String   @id @default(cuid())
  name       String
  code       String?
  district   District @relation(fields: [districtId], references: [id])
  districtId String
  wards      Ward[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Int      @default(0)
  path       String   @unique
  level      Int      @default(3)

  @@unique([name, districtId])
  @@index([path])
}

model Ward {
  id        String     @id @default(cuid())
  name      String
  code      String?
  llg       LLG        @relation(fields: [llgId], references: [id])
  llgId     String
  villages  String[]
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  order     Int        @default(0)
  path      String     @unique
  level     Int        @default(4)

  @@unique([name, llgId])
  @@index([path])
}

model Region {
  id          String        @id @default(cuid())
  name        String
  code        String?
  geoRegion   GeoRegion     @relation(fields: [geoRegionId], references: [id])
  geoRegionId String
  districts   AbgDistrict[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  order       Int           @default(0)
  path        String        @unique
  level       Int           @default(1)

  @@unique([name, geoRegionId])
  @@index([path])
}

model AbgDistrict {
  id             String         @id @default(cuid())
  name           String
  code           String?
  region         Region         @relation(fields: [regionId], references: [id])
  regionId       String
  constituencies Constituency[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  order          Int            @default(0)
  path           String         @unique
  level          Int            @default(2)

  @@unique([name, regionId])
  @@index([path])
}

model Constituency {
  id         String      @id @default(cuid())
  name       String
  code       String?
  district   AbgDistrict @relation(fields: [districtId], references: [id])
  districtId String
  villages   String[]
  locations  Location[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  order      Int         @default(0)
  path       String      @unique
  level      Int         @default(3)

  @@unique([name, districtId])
  @@index([path])
}

model MkaRegion {
  id          String    @id @default(cuid())
  name        String
  code        String?
  geoRegion   GeoRegion @relation(fields: [geoRegionId], references: [id])
  geoRegionId String
  wards       MkaWard[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Int       @default(0)
  path        String    @unique
  level       Int       @default(1)

  @@unique([name, geoRegionId])
  @@index([path])
}

model MkaWard {
  id        String     @id @default(cuid())
  name      String
  code      String?
  region    MkaRegion  @relation(fields: [regionId], references: [id])
  regionId  String
  sections  String[]
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  order     Int        @default(0)
  path      String     @unique
  level     Int        @default(2)

  @@unique([name, regionId])
  @@index([path])
}

model Location {
  id             String        @id @default(cuid())
  name           String
  code           String?
  ward           Ward?         @relation(fields: [wardId], references: [id])
  wardId         String?
  constituency   Constituency? @relation(fields: [constituencyId], references: [id])
  constituencyId String?
  mkaWard        MkaWard?      @relation(fields: [mkaWardId], references: [id])
  mkaWardId      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  order          Int           @default(0)
  path           String        @unique
  level          Int

  @@index([path])
}

model NodeMovementHistory {
  id          String   @id @default(cuid())
  nodeId      String
  nodeType    String
  oldParentId String
  newParentId String
  movedAt     DateTime @default(now())
  movedBy     Admin    @relation(fields: [adminId], references: [id])
  adminId     String
  oldPath     String
  newPath     String
  createdAt   DateTime @default(now())
}

model Person {
  id              String    @id @default(cuid())
  firstName       String
  middleName      String?
  lastName        String?
  gender          String?
  dateOfBirth     DateTime?
  faceId          String?
  externalImageId String?
  s3ImagePath     String?
  residentialPath String?
  occupation      String?
  religion        String?
  denomination    String?
  clan            String?
  nid             String?
  electorId       String?
  passport        String?
  driversLicense  String?
  registeredBy    User?     @relation(fields: [registeredById], references: [id])
  registeredById  String?
  album           Album?    @relation(fields: [albumId], references: [id])
  albumId         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  pathType        String?
}

model Album {
  id          String   @id @default(cuid())
  name        String
  description String?
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  people      Person[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([ownerId, name])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
